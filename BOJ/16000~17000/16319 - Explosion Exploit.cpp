#define _CRT_SECURE_NO_WARNINGS 1
#define _CRT_DECLARE_NONSTDC_NAMES 0 // for using y1 as variable name

#include <iostream>
#include <cstdio>
#include <utility>
#include <algorithm>
#include <vector>
#include <map>
#include <iomanip>
#include <functional>
using namespace std;

using ll = long long int;

int n, m, d;
map<ll, double> dp;

double res;
vector<int> a, b;

ll getkey(const vector<int>& my, const vector<int>& op)
{
    ll res = 0;
    for(int i = 0; i < 5; ++i) {
        res *= 7;
        if(my.size() > i) res += my[i];
    }
    for(int i = 0; i < 5; ++i) {
        res *= 7;
        if(op.size() > i) res += op[i];
    }
    return res;
}

double dfs(vector<int> my, vector<int> op, int cnt)
{
    sort(my.begin(), my.end(), greater<>());
    sort(op.begin(), op.end(), greater<>());
    while(my.size() > 0 && my.back() == 0) my.pop_back();
    while(op.size() > 0 && op.back() == 0) op.pop_back();

    ll key = getkey(my, op);
    auto it = dp.find(key);
    if(it != dp.end()) {
        return it->second;
    }
    if(op.size() == 0) {
        dp.insert({ key, 1 });
        return 1;
    }
    if(cnt > d) return 0;

    int num = my.size() + op.size();
    double nump = 1.0 / num;
    double res = 0.0;
    for(int i = 0; i < my.size(); ++i) {
        my[i]--;
        res += dfs(my, op, cnt + 1) * nump;
        my[i]++;
    }
    for(int i = 0; i<op.size(); i++) {
        op[i]--;
        res += dfs(my, op, cnt + 1) * nump;
        op[i]++;
    }
    dp.insert({ key, res });
    return res;
}

int main(void)
{
#ifdef CUBE_PS
    freopen("input.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m >> d;
    a.resize(n);
    for(int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    b.resize(m);
    for(int i = 0; i < m; ++i) {
        cin >> b[i];
    }

    cout << fixed << setprecision(10) << dfs(a, b, 1);

    return 0;
}
